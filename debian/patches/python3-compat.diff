--- a/interface/isl.py
+++ b/interface/isl.py
@@ -1302,7 +1302,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_multi_pw_aff_as_map(isl.isl_multi_pw_aff_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def as_set(arg0):
         try:
@@ -2012,7 +2012,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_pw_multi_aff_as_map(isl.isl_pw_multi_aff_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def as_multi_aff(arg0):
         try:
@@ -2704,7 +2704,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_pw_aff_as_map(isl.isl_pw_aff_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def bind(*args):
         if len(args) == 2 and (args[1].__class__ is id or type(args[1]) == str):
@@ -3396,7 +3396,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_multi_aff_as_map(isl.isl_multi_aff_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def as_set(arg0):
         try:
@@ -6825,7 +6825,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_union_map_as_map(isl.isl_union_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def as_multi_union_pw_aff(arg0):
         try:
@@ -7001,7 +7001,7 @@
         exc_info = [None]
         fn = CFUNCTYPE(c_int, c_void_p, c_void_p)
         def cb_func(cb_arg0, cb_arg1):
-            cb_arg0 = map(ctx=arg0.ctx, ptr=isl.isl_map_copy(cb_arg0))
+            cb_arg0 = list(map(ctx=arg0.ctx, ptr=isl.isl_map_copy(cb_arg0)))
             try:
                 res = arg1(cb_arg0)
             except BaseException as e:
@@ -7029,7 +7029,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_union_map_extract_map(arg0.ptr, isl.isl_space_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def factor_domain(arg0):
         try:
@@ -7073,7 +7073,7 @@
         exc_info = [None]
         fn = CFUNCTYPE(c_int, c_void_p, c_void_p)
         def cb_func(cb_arg0, cb_arg1):
-            cb_arg0 = map(ctx=arg0.ctx, ptr=(cb_arg0))
+            cb_arg0 = list(map(ctx=arg0.ctx, ptr=(cb_arg0)))
             try:
                 arg1(cb_arg0)
             except BaseException as e:
@@ -7900,7 +7900,7 @@
     def __str__(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ptr = isl.isl_map_to_str(arg0.ptr)
@@ -7916,7 +7916,7 @@
     def affine_hull(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -7926,37 +7926,37 @@
     def apply_domain(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).apply_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_apply_domain(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def apply_range(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).apply_range(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_apply_range(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def as_pw_multi_aff(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -7966,7 +7966,7 @@
     def bind_domain(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
@@ -7981,7 +7981,7 @@
     def bind_range(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
@@ -7996,37 +7996,37 @@
     def coalesce(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_coalesce(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def complement(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_complement(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def curry(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_curry(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def deltas(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8036,17 +8036,17 @@
     def detect_equalities(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_detect_equalities(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def domain(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8056,42 +8056,42 @@
     def domain_factor_domain(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_domain_factor_domain(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def domain_factor_range(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_domain_factor_range(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def domain_product(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).domain_product(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_domain_product(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def domain_tuple_id(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8109,69 +8109,69 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_map_empty(isl.isl_space_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def eq_at(*args):
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
             ctx = args[0].ctx
             res = isl.isl_map_eq_at_multi_pw_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_pw_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def factor_domain(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_factor_domain(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def factor_range(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_factor_range(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def flatten(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_flatten(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def flatten_domain(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_flatten_domain(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def flatten_range(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_flatten_range(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def foreach_basic_map(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         exc_info = [None]
@@ -8194,22 +8194,22 @@
     def gist(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).gist(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_gist(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def gist_domain(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
@@ -8219,12 +8219,12 @@
             return union_map(arg0).gist_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_gist_domain(isl.isl_map_copy(arg0.ptr), isl.isl_set_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def has_domain_tuple_id(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8235,7 +8235,7 @@
     def has_range_tuple_id(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8246,22 +8246,22 @@
     def intersect(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).intersect(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_intersect(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def intersect_domain(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
@@ -8271,42 +8271,42 @@
             return union_map(arg0).intersect_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_intersect_domain(isl.isl_map_copy(arg0.ptr), isl.isl_set_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def intersect_domain_factor_domain(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).intersect_domain_factor_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_intersect_domain_factor_domain(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def intersect_domain_factor_range(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).intersect_domain_factor_range(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_intersect_domain_factor_range(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def intersect_params(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
@@ -8316,12 +8316,12 @@
             return union_map(arg0).intersect_params(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_intersect_params(isl.isl_map_copy(arg0.ptr), isl.isl_set_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def intersect_range(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
@@ -8331,42 +8331,42 @@
             return union_map(arg0).intersect_range(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_intersect_range(isl.isl_map_copy(arg0.ptr), isl.isl_set_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def intersect_range_factor_domain(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).intersect_range_factor_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_intersect_range_factor_domain(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def intersect_range_factor_range(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).intersect_range_factor_range(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_intersect_range_factor_range(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def is_bijective(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8377,12 +8377,12 @@
     def is_disjoint(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).is_disjoint(arg1)
         ctx = arg0.ctx
@@ -8393,7 +8393,7 @@
     def is_empty(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8404,12 +8404,12 @@
     def is_equal(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).is_equal(arg1)
         ctx = arg0.ctx
@@ -8420,7 +8420,7 @@
     def is_injective(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8431,7 +8431,7 @@
     def is_single_valued(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8442,12 +8442,12 @@
     def is_strict_subset(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).is_strict_subset(arg1)
         ctx = arg0.ctx
@@ -8458,12 +8458,12 @@
     def is_subset(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).is_subset(arg1)
         ctx = arg0.ctx
@@ -8475,44 +8475,44 @@
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
             ctx = args[0].ctx
             res = isl.isl_map_lex_ge_at_multi_pw_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_pw_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def lex_gt_at(*args):
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
             ctx = args[0].ctx
             res = isl.isl_map_lex_gt_at_multi_pw_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_pw_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def lex_le_at(*args):
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
             ctx = args[0].ctx
             res = isl.isl_map_lex_le_at_multi_pw_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_pw_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def lex_lt_at(*args):
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
             ctx = args[0].ctx
             res = isl.isl_map_lex_lt_at_multi_pw_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_pw_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def lexmax(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_lexmax(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def lexmax_pw_multi_aff(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8522,17 +8522,17 @@
     def lexmin(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_lexmin(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def lexmin_pw_multi_aff(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8543,13 +8543,13 @@
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
             ctx = args[0].ctx
             res = isl.isl_map_lower_bound_multi_pw_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_pw_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def max_multi_pw_aff(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8559,7 +8559,7 @@
     def min_multi_pw_aff(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8569,7 +8569,7 @@
     def polyhedral_hull(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8580,60 +8580,60 @@
         if len(args) == 2 and args[1].__class__ is multi_aff:
             ctx = args[0].ctx
             res = isl.isl_map_preimage_domain_multi_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
             ctx = args[0].ctx
             res = isl.isl_map_preimage_domain_multi_pw_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_pw_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         if len(args) == 2 and args[1].__class__ is pw_multi_aff:
             ctx = args[0].ctx
             res = isl.isl_map_preimage_domain_pw_multi_aff(isl.isl_map_copy(args[0].ptr), isl.isl_pw_multi_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def preimage_range(*args):
         if len(args) == 2 and args[1].__class__ is multi_aff:
             ctx = args[0].ctx
             res = isl.isl_map_preimage_range_multi_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         if len(args) == 2 and args[1].__class__ is pw_multi_aff:
             ctx = args[0].ctx
             res = isl.isl_map_preimage_range_pw_multi_aff(isl.isl_map_copy(args[0].ptr), isl.isl_pw_multi_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def product(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).product(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_product(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def project_out_all_params(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_project_out_all_params(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def range(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8643,52 +8643,52 @@
     def range_factor_domain(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_range_factor_domain(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def range_factor_range(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_range_factor_range(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def range_product(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).range_product(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_range_product(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def range_reverse(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_range_reverse(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def range_simple_fixed_box_hull(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8700,7 +8700,7 @@
     def range_tuple_id(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8712,17 +8712,17 @@
     def reverse(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_reverse(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def sample(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8739,7 +8739,7 @@
                 raise
             ctx = args[0].ctx
             res = isl.isl_map_set_domain_tuple_id(isl.isl_map_copy(args[0].ptr), isl.isl_id_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def set_range_tuple(*args):
@@ -8752,13 +8752,13 @@
                 raise
             ctx = args[0].ctx
             res = isl.isl_map_set_range_tuple_id(isl.isl_map_copy(args[0].ptr), isl.isl_id_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def space(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8770,22 +8770,22 @@
     def subtract(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).subtract(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_subtract(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def to_union_map(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8795,27 +8795,27 @@
     def uncurry(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_uncurry(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def union(arg0, arg1):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_map(arg0).union(arg1)
         ctx = arg0.ctx
         res = isl.isl_map_union(isl.isl_map_copy(arg0.ptr), isl.isl_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     @staticmethod
     def universe(arg0):
@@ -8826,12 +8826,12 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_map_universe(isl.isl_space_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def unshifted_simple_hull(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8842,13 +8842,13 @@
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
             ctx = args[0].ctx
             res = isl.isl_map_upper_bound_multi_pw_aff(isl.isl_map_copy(args[0].ptr), isl.isl_multi_pw_aff_copy(args[1].ptr))
-            obj = map(ctx=ctx, ptr=res)
+            obj = list(map(ctx=ctx, ptr=res))
             return obj
         raise Error
     def wrap(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
@@ -8858,12 +8858,12 @@
     def zip(arg0):
         try:
             if not arg0.__class__ is map:
-                arg0 = map(arg0)
+                arg0 = list(map(arg0))
         except:
             raise
         ctx = arg0.ctx
         res = isl.isl_map_zip(isl.isl_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
 
 isl.isl_map_from_basic_map.restype = c_void_p
@@ -9084,7 +9084,7 @@
             if not arg1.__class__ is basic_map:
                 arg1 = basic_map(arg1)
         except:
-            return map(arg0).apply_domain(arg1)
+            return list(map(arg0)).apply_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_apply_domain(isl.isl_basic_map_copy(arg0.ptr), isl.isl_basic_map_copy(arg1.ptr))
         obj = basic_map(ctx=ctx, ptr=res)
@@ -9099,7 +9099,7 @@
             if not arg1.__class__ is basic_map:
                 arg1 = basic_map(arg1)
         except:
-            return map(arg0).apply_range(arg1)
+            return list(map(arg0)).apply_range(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_apply_range(isl.isl_basic_map_copy(arg0.ptr), isl.isl_basic_map_copy(arg1.ptr))
         obj = basic_map(ctx=ctx, ptr=res)
@@ -9164,7 +9164,7 @@
             if not arg1.__class__ is basic_map:
                 arg1 = basic_map(arg1)
         except:
-            return map(arg0).gist(arg1)
+            return list(map(arg0)).gist(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_gist(isl.isl_basic_map_copy(arg0.ptr), isl.isl_basic_map_copy(arg1.ptr))
         obj = basic_map(ctx=ctx, ptr=res)
@@ -9179,7 +9179,7 @@
             if not arg1.__class__ is basic_map:
                 arg1 = basic_map(arg1)
         except:
-            return map(arg0).intersect(arg1)
+            return list(map(arg0)).intersect(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_intersect(isl.isl_basic_map_copy(arg0.ptr), isl.isl_basic_map_copy(arg1.ptr))
         obj = basic_map(ctx=ctx, ptr=res)
@@ -9194,7 +9194,7 @@
             if not arg1.__class__ is basic_set:
                 arg1 = basic_set(arg1)
         except:
-            return map(arg0).intersect_domain(arg1)
+            return list(map(arg0)).intersect_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_intersect_domain(isl.isl_basic_map_copy(arg0.ptr), isl.isl_basic_set_copy(arg1.ptr))
         obj = basic_map(ctx=ctx, ptr=res)
@@ -9209,7 +9209,7 @@
             if not arg1.__class__ is basic_set:
                 arg1 = basic_set(arg1)
         except:
-            return map(arg0).intersect_range(arg1)
+            return list(map(arg0)).intersect_range(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_intersect_range(isl.isl_basic_map_copy(arg0.ptr), isl.isl_basic_set_copy(arg1.ptr))
         obj = basic_map(ctx=ctx, ptr=res)
@@ -9235,7 +9235,7 @@
             if not arg1.__class__ is basic_map:
                 arg1 = basic_map(arg1)
         except:
-            return map(arg0).is_equal(arg1)
+            return list(map(arg0)).is_equal(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_is_equal(arg0.ptr, arg1.ptr)
         if res < 0:
@@ -9251,7 +9251,7 @@
             if not arg1.__class__ is basic_map:
                 arg1 = basic_map(arg1)
         except:
-            return map(arg0).is_subset(arg1)
+            return list(map(arg0)).is_subset(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_is_subset(arg0.ptr, arg1.ptr)
         if res < 0:
@@ -9265,7 +9265,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_basic_map_lexmax(isl.isl_basic_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def lexmin(arg0):
         try:
@@ -9275,7 +9275,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_basic_map_lexmin(isl.isl_basic_map_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def reverse(arg0):
         try:
@@ -9307,10 +9307,10 @@
             if not arg1.__class__ is basic_map:
                 arg1 = basic_map(arg1)
         except:
-            return map(arg0).union(arg1)
+            return list(map(arg0)).union(arg1)
         ctx = arg0.ctx
         res = isl.isl_basic_map_union(isl.isl_basic_map_copy(arg0.ptr), isl.isl_basic_map_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
 
 isl.isl_basic_map_read_from_str.restype = c_void_p
@@ -9977,7 +9977,7 @@
             raise
         try:
             if not arg1.__class__ is map:
-                arg1 = map(arg1)
+                arg1 = list(map(arg1))
         except:
             return union_set(arg0).apply(arg1)
         ctx = arg0.ctx
@@ -10149,7 +10149,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_set_identity(isl.isl_set_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def indicator_function(arg0):
         try:
@@ -10174,7 +10174,7 @@
             return union_set(arg0).insert_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_set_insert_domain(isl.isl_set_copy(arg0.ptr), isl.isl_space_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def intersect(arg0, arg1):
         try:
@@ -10604,7 +10604,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_set_translation(isl.isl_set_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def unbind_params(arg0, arg1):
         try:
@@ -10634,7 +10634,7 @@
             return union_set(arg0).unbind_params_insert_domain(arg1)
         ctx = arg0.ctx
         res = isl.isl_set_unbind_params_insert_domain(isl.isl_set_copy(arg0.ptr), isl.isl_multi_id_copy(arg1.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def union(arg0, arg1):
         try:
@@ -10680,7 +10680,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_set_unwrap(isl.isl_set_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def upper_bound(*args):
         if len(args) == 2 and args[1].__class__ is multi_pw_aff:
@@ -14679,7 +14679,7 @@
             raise
         ctx = arg0.ctx
         res = isl.isl_space_universe_map(isl.isl_space_copy(arg0.ptr))
-        obj = map(ctx=ctx, ptr=res)
+        obj = list(map(ctx=ctx, ptr=res))
         return obj
     def universe_set(arg0):
         try:
--- a/isl_test_python.py
+++ b/isl_test_python.py
@@ -183,7 +183,7 @@
 	assert(not list[1].is_equal(list[2]))
 
 	def fail(bs):
-		raise "fail"
+		raise Exception
 
 	caught = False
 	try:
@@ -217,7 +217,7 @@
 	assert(not us.every_set(not_in_A))
 
 	def fail(s):
-		raise "fail"
+		raise Exception
 
 	caught = False
 	try:
@@ -289,7 +289,7 @@
 	assert(count[0] == 8)
 
 	def fail_map(node):
-		raise "fail"
+		raise Exception
 		return node
 	caught = False
 	try:
@@ -318,7 +318,7 @@
 	assert(not root.every_descendant(is_not_domain))
 
 	def fail(node):
-		raise "fail"
+		raise Exception
 	caught = False
 	try:
 		root.every_descendant(fail)
@@ -392,7 +392,7 @@
 	def fail_inc_count_ast(node, build):
 		count_ast_fail[0] += 1
 		if do_fail:
-			raise "fail"
+			raise Exception
 		return node
 	build = isl.ast_build()
 	build = build.set_at_each_domain(fail_inc_count_ast)
